{
    "companyCode": "001",
    "api": "https://secure.colonialfirststate.com.au/fp/pricenperformance/products/funds/performance",
    "fundLinkBaseUrl": "https://www.colonialfirststate.com.au",
    "mainGroup": {
        "SF": "Super",
        "RF": "Pension",
        "IF": "Investments",
        "WF": "Institutional & master trust"
    },
    "products": {
        "11": "FirstChoice Wholesale Personal Super",
        "65": "FirstChoice Employer Super",
        "51": "FirstChoice Wholesale Pension",
        "91": "FirstChoice Wholesale Investments",
        "70": "FirstChoice Investments",
        "90": "Managed Investment Funds",
        "91,73,120": "Institutional & master trust"
    },
    "years": {
        "oneYear": "1 year",
        "twoYears": "2 years",
        "threeYears": "3 years",
        "fourYears": "4 years",
        "fiveYears": "5 years",
        "sevenYears": "7 years",
        "tenYears": "10 years",
        "sinceInception": "Since inception"
    }
}
............................
package au.com.cfs.winged.servlets;

import au.com.cfs.winged.core.services.DynamicFundService;
import com.adobe.granite.ui.components.ds.DataSource;
import com.adobe.granite.ui.components.ds.SimpleDataSource;
import com.adobe.granite.ui.components.ds.ValueMapResource;
import com.day.cq.dam.api.Asset;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceMetadata;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.api.servlets.HttpConstants;
import org.apache.sling.api.servlets.SlingSafeMethodsServlet;
import org.apache.sling.api.wrappers.ValueMapDecorator;
import org.json.JSONException;
import org.json.JSONObject;
import org.osgi.framework.Constants;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.Servlet;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;

@Component(service = Servlet.class, property = {Constants.SERVICE_DESCRIPTION + "= Json Data in dynamic Dropdown", "sling.servlet.paths=" + "/bin/jsonDataDropdown", "sling.servlet.methods=" + HttpConstants.METHOD_GET})
public class JsonDataDropdownServlet extends SlingSafeMethodsServlet {

    private static final Logger LOGGER = LoggerFactory.getLogger(JsonDataDropdownServlet.class);

    @Reference
    private DynamicFundService dynamicFundService;

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) {

        try {
            ResourceResolver resourceResolver = request.getResourceResolver();
            Resource resource = resourceResolver.getResource("/content/dam/cfs-winged/fpjson/dynamicFundCard.json");
            Asset asset = resource.adaptTo(Asset.class);
            InputStream content = asset.getOriginal().adaptTo(InputStream.class);

            JSONObject jsonObject = new JSONObject(new BufferedReader(new InputStreamReader(content, StandardCharsets.UTF_8)).lines().collect(Collectors.joining()));

            JSONObject mainGroupJson = jsonObject.getJSONObject("mainGroup");

            DataSource dataSource = createFilteredDataSource(mainGroupJson, resourceResolver);
            request.setAttribute(DataSource.class.getName(), dataSource);

        } catch (JSONException | IOException e) {
            LOGGER.error("Error in Json Data Exporting : {}", e.getMessage());
        }
    }

    private DataSource createFilteredDataSource(JSONObject mainGroupJson, ResourceResolver resourceResolver) throws JSONException {
        List<Resource> resourceList = new ArrayList<>();

        Iterator<String> jsonKeys = mainGroupJson.keys();
        while (jsonKeys.hasNext()) {
            String jsonKey = jsonKeys.next();
            String jsonValue = mainGroupJson.getString(jsonKey);

            ValueMap valueMap = new ValueMapDecorator(new HashMap<>());
            valueMap.put("value", jsonKey);
            valueMap.put("text", jsonValue);
            resourceList.add(new ValueMapResource(resourceResolver, new ResourceMetadata(), "nt:unstructured", valueMap));
        }

        return new SimpleDataSource(resourceList.iterator());
    }
}
