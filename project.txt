/content/dam/cfs-winged/fpjson/pricenperformance/PricePerformanceCardRequest.json
/apps/cfs-winged/components/content/dynamicfundperformance/cq:dialog/content/items/column/items/mainGroup/datasource
..................................................................
{
    "companyCode": "001",
    "api": "https://secure.colonialfirststate.com.au/fp/pricenperformance/products/funds/performance",
    "mainGroup": {
        "SF": "Super",
        "RF": "Pension",
        "IF": "Investments",
        "WF": "Institutional & master trust"
    },
    "products": {
        "11": "FirstChoice Wholesale Personal Super",
        "65": "FirstChoice Employer Super",
        "51": "FirstChoice Wholesale Pension",
        "91": "FirstChoice Wholesale Investments",
        "70": "FirstChoice Investments",
        "90": "Managed Investment Funds",
        "91,73,120": "Institutional & master trust"
    },
    "years": {
        "oneYear": "1 year",
        "twoYears": "2 years",
        "threeYears": "3 years",
        "fourYears": "4 years",
        "fiveYears": "5 years",
        "sevenYears": "7 years",
        "tenYears": "10 years",
        "sinceInception": "Since inception"
    }
}


....................................................................
package au.com.cfs.winged.servlets;

import com.adobe.granite.ui.components.ds.DataSource;
import com.adobe.granite.ui.components.ds.SimpleDataSource;
import com.adobe.granite.ui.components.ds.ValueMapResource;
import com.day.crx.JcrConstants;
import com.google.gson.*;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceMetadata;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.api.servlets.HttpConstants;
import org.apache.sling.api.servlets.SlingSafeMethodsServlet;
import org.apache.sling.api.wrappers.ValueMapDecorator;
import org.osgi.framework.Constants;
import org.osgi.service.component.annotations.Component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.jcr.Node;
import javax.jcr.RepositoryException;
import javax.servlet.Servlet;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.*;

@Component(service = Servlet.class, property = {
        Constants.SERVICE_DESCRIPTION + "= JSON Data in Dynamic Dropdown",
        "sling.servlet.paths=" + "/bin/cfs/PricePerformanceCardRequest.json",
        "sling.servlet.methods=" + HttpConstants.METHOD_GET
})
public class PricePerformanceCardServlet extends SlingSafeMethodsServlet {

    private static final Logger LOGGER = LoggerFactory.getLogger(PricePerformanceCardServlet.class);

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) {
        ResourceResolver resourceResolver = request.getResourceResolver();
        Resource pathResource = request.getResource();

        try {
            // Fetching the JSON data path from the dialog's fpjsonPath property
            String jsonDataPath = Objects.requireNonNull(pathResource.getValueMap().get("fpjsonPath", String.class));
            Resource jsonResource = resourceResolver.getResource(jsonDataPath + "/" + JcrConstants.JCR_CONTENT);
            if (jsonResource == null) {
                throw new IOException("JSON resource not found at path: " + jsonDataPath);
            }

            Node jsonNode = jsonResource.adaptTo(Node.class);
            InputStream inputStream = jsonNode.getProperty("jcr:data").getBinary().getStream();
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));

            StringBuilder stringBuilder = new StringBuilder();
            String eachLine;
            while ((eachLine = bufferedReader.readLine()) != null) {
                stringBuilder.append(eachLine);
            }

            // Parsing JSON using Gson
            Gson gson = new Gson();
            JsonObject jsonObject = gson.fromJson(stringBuilder.toString(), JsonObject.class);

            // Retrieve companyCode and api values
            String companyCode = jsonObject.get("companyCode").getAsString();
            String api = jsonObject.get("api").getAsString();

            // Setting companyCode and api as request attributes
            request.setAttribute("companyCode", companyCode);
            request.setAttribute("api", api);

            // Retrieve the attributeName to determine which dropdown to populate
            String dropdownAttribute = request.getResource().getValueMap().get("attributeName", String.class);
            if (dropdownAttribute == null) {
                throw new JsonParseException("Dropdown attribute name is missing in the resource.");
            }

            JsonArray attributeDataArray = jsonObject.getAsJsonArray(dropdownAttribute);
            List<Resource> resourceList = new ArrayList<>();

            for (JsonElement element : attributeDataArray) {
                JsonObject attributeData = element.getAsJsonObject();
                Map.Entry<String, JsonElement> entry = attributeData.entrySet().iterator().next();
                String key = entry.getKey();
                String value = entry.getValue().getAsString();

                ValueMap valueMap = new ValueMapDecorator(new HashMap<>());
                valueMap.put("value", key);
                valueMap.put("text", value);
                resourceList.add(new ValueMapResource(resourceResolver, new ResourceMetadata(), "nt:unstructured", valueMap));
            }

            DataSource dataSource = new SimpleDataSource(resourceList.iterator());
            request.setAttribute(DataSource.class.getName(), dataSource);

        } catch (Exception e) {
            LOGGER.error("Error in JSON Data Exporting: {}", e.getMessage(), e);
        }
    }
}



