package au.com.cfs.winged.servlets;

import au.com.cfs.winged.core.services.DynamicFundService;
import com.adobe.granite.ui.components.ds.DataSource;
import com.adobe.granite.ui.components.ds.SimpleDataSource;
import com.adobe.granite.ui.components.ds.ValueMapResource;
import com.day.cq.dam.api.Asset;
import com.day.cq.dam.api.Rendition;
import com.day.cq.dam.commons.util.DamUtil;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.iterators.TransformIterator;
import org.apache.jackrabbit.JcrConstants;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceMetadata;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.api.servlets.SlingSafeMethodsServlet;
import org.apache.sling.api.wrappers.ValueMapDecorator;
import org.json.JSONArray;
import org.json.JSONException;
import org.osgi.framework.Constants;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.Servlet;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.TreeMap;

import static au.com.cfs.winged.core.common.constants.DynamicFundConstants.*;
import static au.com.cfs.winged.servlets.DynamicDataSourceServlet.RESOURCE_TYPE;
import static au.com.cfs.winged.servlets.DynamicDataSourceServlet.SERVICE_NAME;
import static org.apache.sling.api.servlets.ServletResolverConstants.SLING_SERVLET_RESOURCE_TYPES;


@Component(service = Servlet.class,	property = {Constants.SERVICE_ID + EQUALS + SERVICE_NAME,	SLING_SERVLET_RESOURCE_TYPES + EQUALS + RESOURCE_TYPE})
public class DynamicDataSourceServlet extends SlingSafeMethodsServlet {

	protected static final String SERVICE_NAME = "Dynamic DataSource Servlet";
	protected static final String RESOURCE_TYPE = "/apps/cfs-winged/preferences/dropdowns";
	private static final long serialVersionUID = 4235730140092283425L;
	private static final String TAG = DynamicDataSourceServlet.class.getSimpleName();
	private static final Logger LOGGER = LoggerFactory.getLogger(DynamicDataSourceServlet.class);

	@Reference
	private DynamicFundService dynamicFundService;

	@Override
	protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) {
		try {

			ResourceResolver resourceResolver = request.getResourceResolver();
			Resource currentResource = request.getResource();
			String dropdownSelector = Objects.requireNonNull(currentResource.getChild(DATASOURCE)).getValueMap().get(DROPDOWN_SELECTOR, String.class);
			Resource jsonResource = getJsonResource(resourceResolver, Objects.requireNonNull(dropdownSelector));
			Asset asset = DamUtil.resolveToAsset(jsonResource);
			Rendition originalAsset = Objects.requireNonNull(asset).getOriginal();
			InputStream content = Objects.requireNonNull(originalAsset).adaptTo(InputStream.class);
			StringBuilder jsonContent = new StringBuilder();
			BufferedReader jsonReader = new BufferedReader(new InputStreamReader(Objects.requireNonNull(content), StandardCharsets.UTF_8));
			String line;
			while((line = jsonReader.readLine()) != null) {
				jsonContent.append(line);
			}

			JSONArray jsonArray = new JSONArray(jsonContent.toString());

			String companyCode = jsonContent.getString("companyCode");
			String api = jsonContent.getJSONObject("companyCode");
			String fundLinkBaseUrl = jsonContent.getString("fundLinkBaseUrl");

			dynamicFundService.setCompanyCode(companyCode);
			dynamicFundService.setApi(api);
			dynamicFundService.setFundLinkBaseUrl(fundLinkBaseUrl);

			Map<String, String> data = new TreeMap<>();
			for(int i = 0; i < jsonArray.length(); i++) {
				data.put(jsonArray.getJSONObject(i).getString("text"),	jsonArray.getJSONObject(i).getString("value"));
			}
			// Creating the data source object
			@SuppressWarnings({"unchecked", "rawtypes"}) DataSource ds = new SimpleDataSource(new TransformIterator<>(data.keySet().iterator(), (Transformer) o -> {
				String dropValue = (String) o;
				ValueMap vm = new ValueMapDecorator(new HashMap<>());
				vm.put("text", dropValue);
				vm.put("value", data.get(dropValue));
				return new ValueMapResource(resourceResolver, new ResourceMetadata(), JcrConstants.NT_UNSTRUCTURED, vm);
			}));
			request.setAttribute(DataSource.class.getName(), ds);
		} catch(IOException | JSONException e) {
			LOGGER.error("{}: exception occurred: {}", TAG, e.getMessage());
		}
	}

	private Resource getJsonResource(ResourceResolver resourceResolver, String dropdownSelector) {
		Resource jsonResource;
		switch(dropdownSelector) {
			case COUNTRY_LIST:
				jsonResource = resourceResolver.getResource(COUNTRY_LIST_PATH);
				break;
			case COLOR_LIST:
				jsonResource = resourceResolver.getResource(COLOR_LIST_PATH);
				break;
			case FONT_LIST:
				jsonResource = resourceResolver.getResource(FONT_LIST_PATH);
				break;
			default:
				throw new IllegalStateException("Unexpected value: " + dropdownSelector);
		}
		return jsonResource;
	}
}
