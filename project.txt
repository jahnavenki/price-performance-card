/content/cfs-winged/au/en/super/jcr:content/root/responsivegrid/container/three_column_contain/responsivegrid/responsivegrid3/dynamicfundcard
/apps/cfs-winged/components/content/dynamicFundCard/cq:dialog/content/items/column/items/mainGroup/datasource
{
    "companyCode": "001",
    "api": "https://secure.colonialfirststate.com.au/fp/pricenperformance/products/funds/performance",
    "fundLinkBaseUrl": "https://www.colonialfirststate.com.au",
    "mainGroup": {
        "SF": "Super",
        "RF": "Pension",
        "IF": "Investments",
        "WF": "Institutional & master trust"
    },
    "products": {
        "11": "FirstChoice Wholesale Personal Super",
        "65": "FirstChoice Employer Super",
        "51": "FirstChoice Wholesale Pension",
        "91": "FirstChoice Wholesale Investments",
        "70": "FirstChoice Investments",
        "90": "Managed Investment Funds",
        "91,73,120": "Institutional & master trust"
    },
    "years": {
        "oneYear": "1 year",
        "twoYears": "2 years",
        "threeYears": "3 years",
        "fourYears": "4 years",
        "fiveYears": "5 years",
        "sevenYears": "7 years",
        "tenYears": "10 years",
        "sinceInception": "Since inception"
    }
}
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) {
    resourceList = new ArrayList<>();

    try {
        ResourceResolver resourceResolver = request.getResourceResolver();
        Resource resource = resourceResolver.getResource("/content/dam/cfs-winged/fpjson/dynamicFundCard.json");
        Asset asset = resource.adaptTo(Asset.class);
        InputStream content = asset.getOriginal().adaptTo(InputStream.class);
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(content, StandardCharsets.UTF_8));
        StringBuilder stringBuilder = new StringBuilder();
        String eachLine;

        while((eachLine = bufferedReader.readLine()) != null) {
            stringBuilder.append(eachLine);
        }

        JSONObject jsonObject = new JSONObject(stringBuilder.toString());

        // Populate products dropdown
        JSONObject productsJson = jsonObject.getJSONObject("products");
        addItemsToResourceList(productsJson, resourceResolver, resourceList);

        // Populate years dropdown
        JSONObject yearsJson = jsonObject.getJSONObject("years");
        addItemsToResourceList(yearsJson, resourceResolver, resourceList);

        // Populate mainGroup dropdown
        JSONObject mainGroupJson = jsonObject.getJSONObject("mainGroup");
        addItemsToResourceList(mainGroupJson, resourceResolver, resourceList);

        DataSource dataSource = new SimpleDataSource(resourceList.iterator());
        request.setAttribute(DataSource.class.getName(), dataSource);

    } catch(JSONException | IOException e) {
        LOGGER.error("Error in Json Data Exporting : {}", e.getMessage());
    }
}
