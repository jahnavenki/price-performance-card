package au.com.cfs.winged.servlets;

import com.adobe.granite.ui.components.ds.DataSource;
import com.adobe.granite.ui.components.ds.SimpleDataSource;
import com.adobe.granite.ui.components.ds.ValueMapResource;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.iterators.TransformIterator;
import org.apache.jackrabbit.JcrConstants;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceMetadata;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.api.servlets.SlingSafeMethodsServlet;
import org.apache.sling.api.wrappers.ValueMapDecorator;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.osgi.framework.Constants;
import org.osgi.service.component.annotations.Component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.Servlet;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.TreeMap;

@Component(
    service = Servlet.class,
    property = {
        Constants.SERVICE_ID + "=" + DynamicFundDataSourceServlet.SERVICE_NAME,
        "sling.servlet.resourceTypes=" + DynamicFundDataSourceServlet.RESOURCE_TYPE
    }
)
public class DynamicFundDataSourceServlet extends SlingSafeMethodsServlet {

    protected static final String SERVICE_NAME = "Dynamic Fund DataSource Servlet";
    protected static final String RESOURCE_TYPE = "/apps/cfs-winged/dynamicFund/dropdowns";
    private static final long serialVersionUID = 4235730140092283425L;
    private static final String TAG = DynamicFundDataSourceServlet.class.getSimpleName();
    private static final Logger LOGGER = LoggerFactory.getLogger(DynamicFundDataSourceServlet.class);

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) {
        try {
            ResourceResolver resourceResolver = request.getResourceResolver();
            Resource currentResource = request.getResource();

            // Retrieve dropdown selector and mainGroup from dialog properties or request parameters
            String dropdownSelector = Objects.requireNonNull(currentResource.getChild("datasource")).getValueMap().get("dropdownSelector", String.class);
            String mainGroupValue = Objects.requireNonNull(currentResource.getChild("datasource")).getValueMap().get("mainGroup", String.class);

            // Retrieve JSON array based on dropdown selector
            JSONArray jsonArray = getJsonArray(resourceResolver, dropdownSelector);

            // Filter products based on main group selection
            JSONArray filteredProducts = filterProductsByMainGroup(jsonArray, mainGroupValue);

            // Convert filteredProducts to map for DataSource
            Map<String, String> data = new TreeMap<>();
            for (int i = 0; i < filteredProducts.length(); i++) {
                JSONObject product = filteredProducts.getJSONObject(i);
                data.put(product.getString("text"), product.getString("value"));
            }

            // Create DataSource
            @SuppressWarnings({"unchecked", "rawtypes"})
            DataSource ds = new SimpleDataSource(new TransformIterator<>(data.keySet().iterator(), (Transformer) o -> {
                String dropValue = (String) o;
                ValueMap vm = new ValueMapDecorator(new HashMap<>());
                vm.put("text", dropValue);
                vm.put("value", data.get(dropValue));
                return new ValueMapResource(resourceResolver, new ResourceMetadata(), JcrConstants.NT_UNSTRUCTURED, vm);
            }));
            request.setAttribute(DataSource.class.getName(), ds);
        } catch (IOException | JSONException e) {
            LOGGER.error("{}: exception occurred: {}", TAG, e.getMessage());
        }
    }

    private JSONArray getJsonArray(ResourceResolver resourceResolver, String selector) throws IOException, JSONException {
        // Adjust paths or logic as needed based on selector
        switch (selector) {
            case "mainGroupList":
                return getJsonArrayFromPath(resourceResolver, "/content/cfs-winged/mainGroup.json");
            case "productsList":
                return getJsonArrayFromPath(resourceResolver, "/content/cfs-winged/products.json");
            case "yearsList":
                return getJsonArrayFromPath(resourceResolver, "/content/cfs-winged/years.json");
            default:
                throw new IllegalArgumentException("Invalid selector: " + selector);
        }
    }

    private JSONArray getJsonArrayFromPath(ResourceResolver resourceResolver, String path) throws IOException, JSONException {
        Resource resource = resourceResolver.getResource(path);
        if (resource != null) {
            InputStream is = resource.adaptTo(InputStream.class);
            BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));
            StringBuilder stringBuilder = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                stringBuilder.append(line);
            }
            return new JSONArray(stringBuilder.toString());
        } else {
            throw new IOException("Resource not found: " + path);
        }
    }

    private JSONArray filterProductsByMainGroup(JSONArray products, String selectedMainGroup) throws JSONException {
        JSONArray filteredProducts = new JSONArray();
        for (int i = 0; i < products.length(); i++) {
            JSONObject product = products.getJSONObject(i);
            if (product.optString("mainGroup").equals(selectedMainGroup)) {
                filteredProducts.put(product);
            }
        }
        return filteredProducts;
    }
}
