@Override
protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) {
    try {
        ResourceResolver resourceResolver = request.getResourceResolver();
        Resource currentResource = request.getResource();

        // Fetching mainGroup dropdown selector from the request parameter
        String dropdownSelector = Objects.requireNonNull(currentResource.getChild(DATASOURCE)).getValueMap().get(DROPDOWN_SELECTOR, String.class);
        
        // Retrieving JSON resource based on dropdownSelector
        Resource jsonResource = getJsonResource(resourceResolver, dropdownSelector);
        Asset asset = DamUtil.resolveToAsset(jsonResource);
        Rendition originalAsset = Objects.requireNonNull(asset).getOriginal();
        InputStream content = Objects.requireNonNull(originalAsset).adaptTo(InputStream.class);
        StringBuilder jsonContent = new StringBuilder();
        BufferedReader jsonReader = new BufferedReader(new InputStreamReader(Objects.requireNonNull(content), StandardCharsets.UTF_8));
        String line;
        
        // Reading JSON content
        while((line = jsonReader.readLine()) != null) {
            jsonContent.append(line);
        }
        
        // Creating JSONArray from JSON content
        JSONArray jsonArray = new JSONArray(jsonContent.toString());

        // Fetching mainGroup selection from request parameter
        String mainGroupSelection = request.getParameter("mainGroup");

        Map<String, String> data = new TreeMap<>();
        for(int i = 0; i < jsonArray.length(); i++) {
            JSONObject item = jsonArray.getJSONObject(i);
            String text = item.getString("text");
            String value = item.getString("value");

            // Apply filtering based on mainGroup selection
            if (mainGroupSelection == null || mainGroupSelection.isEmpty() || mainGroupSelection.equals("All") || value.contains(mainGroupSelection)) {
                data.put(text, value);
            }
        }

        // Creating DataSource for dropdown
        @SuppressWarnings({"unchecked", "rawtypes"}) 
        DataSource ds = new SimpleDataSource(new TransformIterator<>(data.keySet().iterator(), (Transformer) o -> {
            String dropValue = (String) o;
            ValueMap vm = new ValueMapDecorator(new HashMap<>());
            vm.put("text", dropValue);
            vm.put("value", data.get(dropValue));
            return new ValueMapResource(resourceResolver, new ResourceMetadata(), JcrConstants.NT_UNSTRUCTURED, vm);
        }));

        // Adding DataSource to request attributes
        request.setAttribute(DataSource.class.getName(), ds);

    } catch(IOException | JSONException e) {
        LOGGER.error("{}: exception occurred: {}", TAG, e.getMessage());
    }
}

private Resource getJsonResource(ResourceResolver resourceResolver, String dropdownSelector) {
    Resource jsonResource;
    switch(dropdownSelector) {
        case MAIN_GROUP_LIST:
            jsonResource = resourceResolver.getResource(MAIN_GROUP_LIST_PATH);
            break;
        case PRODUCTS_LIST:
            jsonResource = resourceResolver.getResource(PRODUCTS_LIST_PATH);
            break;
        case YEARS_LIST:
            jsonResource = resourceResolver.getResource(YEARS_LIST_PATH);
            break;
        default:
            throw new IllegalStateException("Unexpected value: " + dropdownSelector);
    }
    return jsonResource;
}
