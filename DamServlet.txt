package au.com.cfs.winged.servlets;

import com.adobe.granite.ui.components.ds.DataSource;
import com.adobe.granite.ui.components.ds.SimpleDataSource;
import com.adobe.granite.ui.components.ds.ValueMapResource;
import com.day.cq.dam.api.Asset;
import com.day.cq.dam.api.Rendition;
import com.day.cq.dam.commons.util.DamUtil;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.iterators.TransformIterator;
import org.apache.jackrabbit.JcrConstants;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceMetadata;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.api.servlets.SlingSafeMethodsServlet;
import org.json.JSONArray;
import org.json.JSONException;
import org.osgi.framework.Constants;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.Servlet;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.TreeMap;

import static au.com.cfs.winged.core.common.constants.ApplicationConstants.*;

@Component(service = Servlet.class, property = {Constants.SERVICE_ID + "=" + DynamicFundDataSourceServlet.SERVICE_NAME, "sling.servlet.resourceTypes=" + DynamicFundDataSourceServlet.RESOURCE_TYPE})
public class DynamicFundDataSourceServlet extends SlingSafeMethodsServlet {

    protected static final String SERVICE_NAME = "Dynamic Fund DataSource Servlet";
    protected static final String RESOURCE_TYPE = "/apps/cfs-winged/dynamicFund/dropdowns";
    private static final long serialVersionUID = 4235730140092283425L;
    private static final String TAG = DynamicFundDataSourceServlet.class.getSimpleName();
    private static final Logger LOGGER = LoggerFactory.getLogger(DynamicFundDataSourceServlet.class);

    @Reference
    private DynamicFundService dynamicFundService;

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) {
        try {
            ResourceResolver resourceResolver = request.getResourceResolver();
            Resource currentResource = request.getResource();

            // Fetching mainGroup dropdown selector from the request parameter
            String mainGroupSelector = Objects.requireNonNull(currentResource.getChild(DATASOURCE)).getValueMap().get(DROPDOWN_SELECTOR, String.class);

            // Fetching JSON resource for mainGroup dropdown
            Resource mainGroupResource = getJsonResource(resourceResolver, "mainGroupList");
            JSONArray mainGroupArray = convertToJsonArray(mainGroupResource);

            // Fetching mainGroup selection from request parameter
            String mainGroupSelection = request.getParameter("mainGroup");

            // Fetching products JSON
            Resource productsResource = getJsonResource(resourceResolver, "productsList");
            JSONArray productsArray = convertToJsonArray(productsResource);

            // Map to store filtered products
            Map<String, String> filteredProducts = new TreeMap<>();

            // Iterate over products and filter based on mainGroup selection
            for (int i = 0; i < productsArray.length(); i++) {
                JSONObject product = productsArray.getJSONObject(i);
                String productText = product.getString("text");
                String productValue = product.getString("value");
                String productMainGroup = product.getString("mainGroup");

                // Check if the product's mainGroup matches the selected mainGroup
                if (productMainGroup.equalsIgnoreCase(mainGroupSelection)) {
                    filteredProducts.put(productText, productValue);
                }
            }

            // Creating DataSource for dropdown
            @SuppressWarnings({"unchecked", "rawtypes"})
            DataSource ds = new SimpleDataSource(new TransformIterator<>(filteredProducts.keySet().iterator(), (Transformer) o -> {
                String dropValue = (String) o;
                ValueMap vm = new ValueMapDecorator(new HashMap<>());
                vm.put("text", dropValue);
                vm.put("value", filteredProducts.get(dropValue));
                return new ValueMapResource(resourceResolver, new ResourceMetadata(), JcrConstants.NT_UNSTRUCTURED, vm);
            }));

            // Adding DataSource to request attributes
            request.setAttribute(DataSource.class.getName(), ds);

        } catch (IOException | JSONException e) {
            LOGGER.error("{}: exception occurred: {}", TAG, e.getMessage());
        }
    }

    private Resource getJsonResource(ResourceResolver resourceResolver, String dropdownSelector) {
        Resource jsonResource;
        switch (dropdownSelector) {
            case MAIN_GROUP_LIST:
                jsonResource = resourceResolver.getResource(MAIN_GROUP_LIST_PATH);
                break;
            case PRODUCTS_LIST:
                jsonResource = resourceResolver.getResource(PRODUCTS_LIST_PATH);
                break;
            case YEARS_LIST:
                jsonResource = resourceResolver.getResource(YEARS_LIST_PATH);
                break;
            default:
                throw new IllegalStateException("Unexpected value: " + dropdownSelector);
        }
        return jsonResource;
    }

    private JSONArray convertToJsonArray(Resource jsonResource) throws IOException, JSONException {
        if (jsonResource != null) {
            InputStream is = jsonResource.adaptTo(InputStream.class);
            if (is != null) {
                BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));
                StringBuilder jsonStringBuilder = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    jsonStringBuilder.append(line);
                }
                return new JSONArray(jsonStringBuilder.toString());
            } else {
                throw new IOException("Failed to adapt InputStream from JSON Resource");
            }
        } else {
            throw new IOException("JSON Resource is null");
        }
    }
}
