package au.com.cfs.winged.servlets;

import com.adobe.granite.ui.components.ds.DataSource;
import com.adobe.granite.ui.components.ds.SimpleDataSource;
import com.adobe.granite.ui.components.ds.ValueMapResource;
import com.day.cq.dam.api.Asset;
import com.day.cq.dam.api.Rendition;
import com.day.cq.dam.commons.util.DamUtil;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.iterators.TransformIterator;
import org.apache.jackrabbit.JcrConstants;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceMetadata;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.api.servlets.SlingSafeMethodsServlet;
import org.apache.sling.api.wrappers.ValueMapDecorator;
import org.json.JSONArray;
import org.json.JSONException;
import org.osgi.framework.Constants;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.Servlet;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.TreeMap;

import static au.com.cfs.winged.core.common.constants.ApplicationConstants.*;

@Component(service = Servlet.class, property = {Constants.SERVICE_ID + "=" + DynamicFundDataSourceServlet.SERVICE_NAME, "sling.servlet.resourceTypes=" + DynamicFundDataSourceServlet.RESOURCE_TYPE})
public class DynamicFundDataSourceServlet extends SlingSafeMethodsServlet {

    protected static final String SERVICE_NAME = "Dynamic Fund DataSource Servlet";
    protected static final String RESOURCE_TYPE = "/apps/cfs-winged/dynamicFund/dropdowns";
    private static final long serialVersionUID = 4235730140092283425L;
    private static final String TAG = DynamicFundDataSourceServlet.class.getSimpleName();
    private static final Logger LOGGER = LoggerFactory.getLogger(DynamicFundDataSourceServlet.class);

    @Reference
    private DynamicFundService dynamicFundService;

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) {
        try {
            ResourceResolver resourceResolver = request.getResourceResolver();
            Resource currentResource = request.getResource();
            String dropdownSelector = Objects.requireNonNull(currentResource.getChild(DATASOURCE)).getValueMap().get(DROPDOWN_SELECTOR, String.class);
            Resource jsonResource = getJsonResource(resourceResolver, Objects.requireNonNull(dropdownSelector));
            Asset asset = DamUtil.resolveToAsset(jsonResource);
            Rendition originalAsset = Objects.requireNonNull(asset).getOriginal();
            InputStream content = Objects.requireNonNull(originalAsset).adaptTo(InputStream.class);
            StringBuilder jsonContent = new StringBuilder();
            BufferedReader jsonReader = new BufferedReader(new InputStreamReader(Objects.requireNonNull(content), StandardCharsets.UTF_8));
            String line;
            while ((line = jsonReader.readLine()) != null) {
                jsonContent.append(line);
            }
            JSONArray jsonArray = new JSONArray(jsonContent.toString());

            String mainGroup = request.getParameter("mainGroup");

            // Filter products based on mainGroup selection
            Map<String, String[]> mainGroupToProducts = new HashMap<>();
            mainGroupToProducts.put("SF", new String[]{"FirstChoice Wholesale Personal Super", "FirstChoice Employer Super"});
            mainGroupToProducts.put("RF", new String[]{"FirstChoice Wholesale Pension"});
            mainGroupToProducts.put("IF", new String[]{"FirstChoice Wholesale Investments", "FirstChoice Investments", "Managed Investment Funds"});
            mainGroupToProducts.put("WF", new String[]{"Institutional & Master Mrust"});

            String[] filteredProducts = mainGroupToProducts.get(mainGroup);

            if (filteredProducts != null) {
                Map<String, String> data = new TreeMap<>();
                for (String productText : filteredProducts) {
                    for (int i = 0; i < jsonArray.length(); i++) {
                        if (jsonArray.getJSONObject(i).getString("text").equals(productText)) {
                            data.put(jsonArray.getJSONObject(i).getString("text"), jsonArray.getJSONObject(i).getString("value"));
                            break;
                        }
                    }
                }

                @SuppressWarnings({"unchecked", "rawtypes"}) DataSource ds = new SimpleDataSource(new TransformIterator<>(data.keySet().iterator(), (Transformer) o -> {
                    String dropValue = (String) o;
                    ValueMap vm = new ValueMapDecorator(new HashMap<>());
                    vm.put("text", dropValue);
                    vm.put("value", data.get(dropValue));
                    return new ValueMapResource(resourceResolver, new ResourceMetadata(), JcrConstants.NT_UNSTRUCTURED, vm);
                }));
                request.setAttribute(DataSource.class.getName(), ds);
            }

            // Retain existing code for years dropdown
            // Assuming the years dropdown processing is handled elsewhere or differently

        } catch (IOException | JSONException e) {
            LOGGER.error("{}: exception occurred: {}", TAG, e.getMessage());
        }
    }

    private Resource getJsonResource(ResourceResolver resourceResolver, String dropdownSelector) {
        Resource jsonResource;
        switch (dropdownSelector) {
            case MAIN_GROUP_LIST:
                jsonResource = resourceResolver.getResource(MAIN_GROUP_LIST_PATH);
                break;
            case PRODUCTS_LIST:
                jsonResource = resourceResolver.getResource(PRODUCTS_LIST_PATH);
                break;
            case YEARS_LIST:
                jsonResource = resourceResolver.getResource(YEARS_LIST_PATH);
                break;
            default:
                throw new IllegalStateException("Unexpected value: " + dropdownSelector);
        }
        return jsonResource;
    }
}
