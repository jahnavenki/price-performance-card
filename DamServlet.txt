import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.TreeMap;

// Import statements and class definition...

private static final String MAIN_GROUP_JSON_PATH = "/path/to/mainGroup.json";
private static final String PRODUCTS_JSON_PATH = "/path/to/products.json";
private static final String YEARS_JSON_PATH = "/path/to/years.json";

@Override
protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) {
    try {
        ResourceResolver resourceResolver = request.getResourceResolver();

        // Load mainGroup JSON
        Resource mainGroupResource = resourceResolver.getResource(MAIN_GROUP_JSON_PATH);
        JSONArray mainGroupJson = new JSONArray(getJsonContent(mainGroupResource));

        // Load products JSON
        Resource productsResource = resourceResolver.getResource(PRODUCTS_JSON_PATH);
        JSONArray productsJson = new JSONArray(getJsonContent(productsResource));

        // Load years JSON
        Resource yearsResource = resourceResolver.getResource(YEARS_JSON_PATH);
        JSONArray yearsJson = new JSONArray(getJsonContent(yearsResource));

        // Get dropdown selector (assuming similar to your existing logic)
        String dropdownSelector = Objects.requireNonNull(currentResource.getChild(DATASOURCE)).getValueMap().get(DROPDOWN_SELECTOR, String.class);

        // Get selected mainGroup value from mainGroup JSON
        String selectedMainGroupValue = getSelectedMainGroupValue(mainGroupJson, dropdownSelector);

        // Filter products based on selected mainGroup
        JSONArray filteredProducts = filterProductsByMainGroup(productsJson, selectedMainGroupValue);

        // Construct data for products dropdown
        Map<String, String> productData = new TreeMap<>();
        for (int i = 0; i < filteredProducts.length(); i++) {
            JSONObject product = filteredProducts.getJSONObject(i);
            productData.put(product.getString("text"), product.getString("value"));
        }

        // Construct data for years dropdown
        Map<String, String> yearData = new TreeMap<>();
        for (int i = 0; i < yearsJson.length(); i++) {
            JSONObject year = yearsJson.getJSONObject(i);
            yearData.put(year.getString("text"), year.getString("value"));
        }

        // Create DataSource for products
        @SuppressWarnings({"unchecked", "rawtypes"}) DataSource productDataSource = new SimpleDataSource(new TransformIterator<>(productData.keySet().iterator(), (Transformer) o -> {
            String dropValue = (String) o;
            ValueMap vm = new ValueMapDecorator(new HashMap<>());
            vm.put("text", dropValue);
            vm.put("value", productData.get(dropValue));
            return new ValueMapResource(resourceResolver, new ResourceMetadata(), JcrConstants.NT_UNSTRUCTURED, vm);
        }));
        request.setAttribute("productsDataSource", productDataSource);

        // Create DataSource for years
        @SuppressWarnings({"unchecked", "rawtypes"}) DataSource yearDataSource = new SimpleDataSource(new TransformIterator<>(yearData.keySet().iterator(), (Transformer) o -> {
            String dropValue = (String) o;
            ValueMap vm = new ValueMapDecorator(new HashMap<>());
            vm.put("text", dropValue);
            vm.put("value", yearData.get(dropValue));
            return new ValueMapResource(resourceResolver, new ResourceMetadata(), JcrConstants.NT_UNSTRUCTURED, vm);
        }));
        request.setAttribute("yearsDataSource", yearDataSource);

    } catch (IOException | JSONException e) {
        LOGGER.error("{}: exception occurred: {}", TAG, e.getMessage());
    }
}

private String getJsonContent(Resource resource) throws IOException {
    InputStream inputStream = resource.adaptTo(InputStream.class);
    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));
    StringBuilder stringBuilder = new StringBuilder();
    String line;
    while ((line = reader.readLine()) != null) {
        stringBuilder.append(line);
    }
    return stringBuilder.toString();
}

private String getSelectedMainGroupValue(JSONArray mainGroupJson, String dropdownSelector) throws JSONException {
    for (int i = 0; i < mainGroupJson.length(); i++) {
        JSONObject jsonObject = mainGroupJson.getJSONObject(i);
        if (jsonObject.getString("text").equals(dropdownSelector)) {
            return jsonObject.getString("value");
        }
    }
    return null; // Handle appropriately if dropdownSelector doesn't match any mainGroup
}

private JSONArray filterProductsByMainGroup(JSONArray productsJson, String selectedMainGroupValue) throws JSONException {
    JSONArray filteredProducts = new JSONArray();
    for (int i = 0; i < productsJson.length(); i++) {
        JSONObject product = productsJson.getJSONObject(i);
        if (product.getString("mainGroup").equals(selectedMainGroupValue)) {
            filteredProducts.put(product);
        }
    }
    return filteredProducts;
}
