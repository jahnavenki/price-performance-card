package au.com.cfs.winged.servlets;

import com.adobe.granite.ui.components.ds.DataSource;
import com.adobe.granite.ui.components.ds.SimpleDataSource;
import com.adobe.granite.ui.components.ds.ValueMapResource;
import com.day.cq.dam.api.Asset;
import com.day.cq.dam.api.Rendition;
import com.day.cq.dam.commons.util.DamUtil;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.iterators.TransformIterator;
import org.apache.jackrabbit.JcrConstants;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceMetadata;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.api.servlets.SlingSafeMethodsServlet;
import org.apache.sling.api.wrappers.ValueMapDecorator;
import org.json.JSONArray;
import org.json.JSONException;
import org.osgi.framework.Constants;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.Servlet;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.TreeMap;

import static au.com.cfs.winged.core.common.constants.ApplicationConstants.*;

@Component(
    service = Servlet.class,
    property = {
        Constants.SERVICE_ID + "=" + DynamicFundDataSourceServlet.SERVICE_NAME,
        "sling.servlet.resourceTypes=" + DynamicFundDataSourceServlet.RESOURCE_TYPE
    }
)
public class DynamicFundDataSourceServlet extends SlingSafeMethodsServlet {

    protected static final String SERVICE_NAME = "Dynamic Fund DataSource Servlet";
    protected static final String RESOURCE_TYPE = "/apps/cfs-winged/dynamicFund/dropdowns";
    private static final long serialVersionUID = 4235730140092283425L;
    private static final String TAG = DynamicFundDataSourceServlet.class.getSimpleName();
    private static final Logger LOGGER = LoggerFactory.getLogger(DynamicFundDataSourceServlet.class);

    @Reference
    private DynamicFundService dynamicFundService;

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) {
        try {
            ResourceResolver resourceResolver = request.getResourceResolver();
            Resource currentResource = request.getResource();
            
            // Fetching dropdown selector from the request parameter
            String dropdownSelector = Objects.requireNonNull(currentResource.getChild(DATASOURCE)).getValueMap().get(DROPDOWN_SELECTOR, String.class);
            
            // Fetching JSON resource based on the dropdown selector
            Resource jsonResource = getJsonResource(resourceResolver, dropdownSelector);
            JSONArray jsonArray = convertToJsonArray(jsonResource);
            
            // Depending on the dropdown selector, process the JSON data accordingly
            Map<String, String> data = new TreeMap<>();
            switch (dropdownSelector) {
                case MAIN_GROUP_LIST:
                    // Process mainGroup JSON data
                    data = processMainGroupData(jsonArray);
                    break;
                case PRODUCTS_LIST:
                    // Filter products based on mainGroup selection
                    String mainGroupValue = request.getParameter("mainGroup"); // Assuming parameter name is "mainGroup"
                    data = filterProductsByMainGroup(jsonArray, mainGroupValue);
                    break;
                case YEARS_LIST:
                    // Process years JSON data
                    data = processYearsData(jsonArray);
                    break;
                default:
                    LOGGER.warn("Unsupported dropdown selector: {}", dropdownSelector);
                    break;
            }
            
            // Creating DataSource for dropdown
            @SuppressWarnings({"unchecked", "rawtypes"})
            DataSource ds = new SimpleDataSource(new TransformIterator<>(data.keySet().iterator(), (Transformer) o -> {
                String dropValue = (String) o;
                ValueMap vm = new ValueMapDecorator(new HashMap<>());
                vm.put("text", dropValue);
                vm.put("value", data.get(dropValue));
                return new ValueMapResource(resourceResolver, new ResourceMetadata(), JcrConstants.NT_UNSTRUCTURED, vm);
            }));
            
            // Adding DataSource to request attributes
            request.setAttribute(DataSource.class.getName(), ds);
            
        } catch (IOException | JSONException e) {
            LOGGER.error("{}: exception occurred: {}", TAG, e.getMessage());
            response.setStatus(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR);
        }
    }

    private Resource getJsonResource(ResourceResolver resourceResolver, String damPath) throws IOException {
        // Fetching JSON resource from DAM using the provided damPath
        Resource jsonResource = resourceResolver.getResource(damPath);
        
        if (jsonResource == null) {
            throw new IOException("Failed to retrieve JSON resource from DAM: " + damPath);
        }
        
        return jsonResource;
    }

    private JSONArray convertToJsonArray(Resource jsonResource) throws IOException, JSONException {
        // Converting InputStream from JSON resource to JSONArray
        InputStream is = null;
        try {
            is = jsonResource.adaptTo(InputStream.class);
            if (is == null) {
                throw new IOException("Failed to adapt InputStream from JSON Resource");
            }
            
            BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));
            StringBuilder jsonStringBuilder = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                jsonStringBuilder.append(line);
            }
            
            return new JSONArray(jsonStringBuilder.toString());
        } finally {
            if (is != null) {
                is.close();
            }
        }
    }

    private Map<String, String> processMainGroupData(JSONArray jsonArray) throws JSONException {
        // Process mainGroup JSON data and return a map of text and values
        Map<String, String> data = new TreeMap<>();
        for (int i = 0; i < jsonArray.length(); i++) {
            data.put(jsonArray.getJSONObject(i).getString("text"), jsonArray.getJSONObject(i).getString("value"));
        }
        return data;
    }

    private Map<String, String> filterProductsByMainGroup(JSONArray productsJsonArray, String mainGroupValue) throws JSONException {
        // Filter products JSON data based on mainGroup selection and return a map of text and values
        Map<String, String> filteredData = new TreeMap<>();
        for (int i = 0; i < productsJsonArray.length(); i++) {
            String text = productsJsonArray.getJSONObject(i).getString("text");
            String value = productsJsonArray.getJSONObject(i).getString("value");
            
            // Assuming mainGroupValue is a comma-separated string of mainGroup values
            String[] mainGroups = mainGroupValue.split(",");
            for (String mainGroup : mainGroups) {
                if (value.equals(mainGroup.trim())) {
                    filteredData.put(text, value);
                    break; // Break once matched to avoid duplicates
                }
            }
        }
        return filteredData;
    }

    private Map<String, String> processYearsData(JSONArray jsonArray) throws JSONException {
        // Process years JSON data and return a map of text and values
        Map<String, String> data = new TreeMap<>();
        for (int i = 0; i < jsonArray.length(); i++) {
            data.put(jsonArray.getJSONObject(i).getString("text"), jsonArray.getJSONObject(i).getString("value"));
        }
        return data;
    }
}
