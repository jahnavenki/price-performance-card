package au.com.cfs.winged.core.services;

import com.day.cq.dam.api.Asset;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.json.JSONException;
import org.osgi.service.component.annotations.Component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.json.JSONArray;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.Map;
import java.util.TreeMap;

@Component(service = DynamicFundService.class)
public class DynamicFundService {
	private static final Logger LOG = LoggerFactory.getLogger(DynamicFundService.class);

	private String companyCode;
	private String api;
	private String fundLinkBaseUrl;

	public String getCompanyCode() {
		return companyCode;
	}

	public void setCompanyCode(String companyCode) {
		this.companyCode = companyCode;
	}

	public String getApi() {
		return api;
	}

	public void setApi(String api) {
		this.api = api;
	}

	public String getFundLinkBaseUrl() {
		return fundLinkBaseUrl;
	}

	public void setFundLinkBaseUrl(String fundLinkBaseUrl) {
		this.fundLinkBaseUrl = fundLinkBaseUrl;
	}

	public void fetchAndSetValues(ResourceResolver resourceResolver) throws IOException, JSONException {
		Resource resource = resourceResolver.getResource("/content/dam/cfs-winged/fpjson/enpoint.json");
		Asset asset = resource.adaptTo(Asset.class);
		Resource original;
		original = asset.getOriginal();
		InputStream jsonContent = original.adaptTo(InputStream.class);
		StringBuilder stringBuilder = new StringBuilder();
		String eachLine;
		BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(jsonContent, StandardCharsets.UTF_8));

		while((eachLine = bufferedReader.readLine()) != null) {
			stringBuilder.append(eachLine);
		}
		JSONArray jsonArray = new JSONArray(jsonContent.toString());
		Map<String, String> data = new TreeMap<>();
		for(int i = 0; i < jsonArray.length(); i++) {
			data.put(jsonArray.getJSONObject(i).getString("text"), jsonArray.getJSONObject(i).getString("value"));

			setCompanyCode(data.get("companyCode"));
			setApi(data.get("api"));
			setFundLinkBaseUrl(data.get("fundLinkBaseUrl"));


		}
	}

}

...........................................
                    package au.com.cfs.winged.core.models;

import au.com.cfs.winged.core.models.common.ButtonsModel;
import au.com.cfs.winged.core.services.DynamicFundService;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.models.annotations.DefaultInjectionStrategy;
import org.apache.sling.models.annotations.Model;
import org.apache.sling.models.annotations.injectorspecific.OSGiService;
import org.apache.sling.models.annotations.injectorspecific.ValueMapValue;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

@Model(adaptables = SlingHttpServletRequest.class, adapters = DynamicFundCardModel.class, defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL)
public class DynamicFundCardModel extends ButtonsModel {

    @Inject
    private ResourceResolver resourceResolver;

    @ValueMapValue
    private String layout;

    @ValueMapValue
    private String cardSize;

    @ValueMapValue
    private String apir;

    @ValueMapValue
    private String inception;

    @ValueMapValue
    private String content;

    @ValueMapValue
    private String imageUrl;

    @ValueMapValue
    private String horizontalLine;

    @ValueMapValue
    private String verticalLine;

    @ValueMapValue
    private String mainGroup;

    @ValueMapValue
    private String product;

    @ValueMapValue
    private String year;

    private String companyCode;

    private String api;

    private String fundLinkBaseUrl;

    @OSGiService
    private DynamicFundService dynamicFundService;

    @PostConstruct
    protected void init() {
        // Fetch and set values in DynamicFundService
        dynamicFundService.fetchAndSetValues(resourceResolver);

        // Initialize model fields with values from DynamicFundService
        companyCode = dynamicFundService.getCompanyCode();
        api = dynamicFundService.getApi();
        fundLinkBaseUrl = dynamicFundService.getFundLinkBaseUrl();
    }

    public String getLayout() {
        return layout;
    }

    public String getCardSize() {
        return cardSize;
    }

    public String getApir() {
        return apir;
    }

    public String getContent() {
        return content;
    }

    public String getImageUrl() {
        return imageUrl;
    }

    public String getHorizontalLine() {
        return horizontalLine;
    }

    public String getVerticalLine() {
        return verticalLine;
    }

    public String getMainGroup() {
        return mainGroup;
    }

    public String getProduct() {
        return product;
    }

    public String getYear() {
        return year;
    }

    public String getCompanyCode() {
        return companyCode;
    }

    public String getApi() {
        return api;
    }

    public String getInception() {
        return inception;
    }

    public String getFundLinkBaseUrl() {
        return fundLinkBaseUrl;
    }
}

                    
