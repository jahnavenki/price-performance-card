package au.com.cfs.winged.core.services;

import com.day.cq.dam.api.Asset;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.json.JSONArray;
import org.json.JSONException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.osgi.service.component.annotations.Component;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.Map;
import java.util.TreeMap;

@Component(service = DynamicFundService.class)
public class DynamicFundService {

    private static final Logger LOG = LoggerFactory.getLogger(DynamicFundService.class);

    private String companyCode;
    private String api;
    private String fundLinkBaseUrl;

    public String getCompanyCode() {
        return companyCode;
    }

    public String getApi() {
        return api;
    }

    public String getFundLinkBaseUrl() {
        return fundLinkBaseUrl;
    }

    public void fetchAndSetValues(ResourceResolver resourceResolver) throws IOException, JSONException {
        Resource resource = resourceResolver.getResource("/content/dam/cfs-winged/fpjson/enpoint.json");
        Asset asset = resource.adaptTo(Asset.class);
        Resource original;
        original = asset.getOriginal();
        InputStream jsonContent = original.adaptTo(InputStream.class);
        StringBuilder stringBuilder = new StringBuilder();
        String eachLine;
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(jsonContent, StandardCharsets.UTF_8));

        while((eachLine = bufferedReader.readLine()) != null) {
            stringBuilder.append(eachLine);
        }
        JSONArray jsonArray = new JSONArray(stringBuilder.toString());
        Map<String, String> data = new TreeMap<>();
        for(int i = 0; i < jsonArray.length(); i++) {
            data.put(jsonArray.getJSONObject(i).getString("text"), jsonArray.getJSONObject(i).getString("value"));
        }

        // Set values directly here
        setCompanyCode(data.get("companyCode"));
        setApi(data.get("api"));
        setFundLinkBaseUrl(data.get("fundLinkBaseUrl"));
    }

    // Setters for companyCode, api, and fundLinkBaseUrl
    private void setCompanyCode(String companyCode) {
        this.companyCode = companyCode;
    }

    private void setApi(String api) {
        this.api = api;
    }

    private void setFundLinkBaseUrl(String fundLinkBaseUrl) {
        this.fundLinkBaseUrl = fundLinkBaseUrl;
    }
}
.........................................................
                package au.com.cfs.winged.core.models;

import au.com.cfs.winged.core.models.common.ButtonsModel;
import au.com.cfs.winged.core.services.DynamicFundService;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.models.annotations.DefaultInjectionStrategy;
import org.apache.sling.models.annotations.Model;
import org.apache.sling.models.annotations.injectorspecific.OSGiService;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;

@Model(adaptables = SlingHttpServletRequest.class, adapters = DynamicFundCardModel.class, defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL)
public class DynamicFundCardModel extends ButtonsModel {

    private static final Logger LOG = LoggerFactory.getLogger(DynamicFundCardModel.class);

    // Inject ResourceResolver
    @Inject
    private ResourceResolver resourceResolver;

    // Inject DynamicFundService using @OSGiService
    @OSGiService
    private DynamicFundService dynamicFundService;

    // PostConstruct method to fetch and set values
    @PostConstruct
    protected void init() {
        // Fetch and set values from DynamicFundService
        if (dynamicFundService != null) {
            try {
                dynamicFundService.fetchAndSetValues(resourceResolver);
            } catch (Exception e) {
                LOG.error("Error initializing DynamicFundCardModel", e);
            }
        } else {
            LOG.warn("DynamicFundService reference is null");
        }
    }

    // Getter methods for accessing properties set by DynamicFundService
    public String getCompanyCode() {
        return dynamicFundService != null ? dynamicFundService.getCompanyCode() : null;
    }

    public String getApi() {
        return dynamicFundService != null ? dynamicFundService.getApi() : null;
    }

    public String getFundLinkBaseUrl() {
        return dynamicFundService != null ? dynamicFundService.getFundLinkBaseUrl() : null;
    }

    // Other properties and methods...

}
