package au.com.cfs.winged.servlets;

import au.com.cfs.winged.core.services.DynamicFundService;
import com.adobe.granite.ui.components.ds.DataSource;
import com.adobe.granite.ui.components.ds.SimpleDataSource;
import com.adobe.granite.ui.components.ds.ValueMapResource;
import com.day.cq.dam.api.Asset;
import com.day.cq.dam.api.Rendition;
import com.day.cq.dam.commons.util.DamUtil;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.iterators.TransformIterator;
import org.apache.jackrabbit.JcrConstants;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceMetadata;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.api.servlets.SlingSafeMethodsServlet;
import org.apache.sling.api.wrappers.ValueMapDecorator;
import org.json.JSONArray;
import org.json.JSONException;
import org.osgi.framework.Constants;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.Servlet;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.TreeMap;

import static au.com.cfs.winged.core.common.constants.ApplicationConstants.*;

@Component(service = Servlet.class, property = {Constants.SERVICE_ID + "=" + DynamicFundDataSourceServlet.SERVICE_NAME, "sling.servlet.resourceTypes=" + DynamicFundDataSourceServlet.RESOURCE_TYPE})
public class DynamicFundDataSourceServlet extends SlingSafeMethodsServlet {

    protected static final String SERVICE_NAME = "Dynamic Fund DataSource Servlet";
    protected static final String RESOURCE_TYPE = "/apps/cfs-winged/dynamicFund/dropdowns";
    private static final long serialVersionUID = 4235730140092283425L;
    private static final String TAG = DynamicFundDataSourceServlet.class.getSimpleName();
    private static final Logger LOGGER = LoggerFactory.getLogger(DynamicFundDataSourceServlet.class);

    @Reference
    private DynamicFundService dynamicFundService;

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) {
        try {
            ResourceResolver resourceResolver = request.getResourceResolver();
            Resource currentResource = request.getResource();
            
            // Existing code to get dropdownSelector
            String dropdownSelector = Objects.requireNonNull(currentResource.getChild(DATASOURCE)).getValueMap().get(DROPDOWN_SELECTOR, String.class);
            
            // Load mainGroup, years, and products JSON data
            JSONArray mainGroupArray = loadJsonArray(resourceResolver.getResource(MAIN_GROUP_LIST_PATH));
            JSONArray yearsArray = loadJsonArray(resourceResolver.getResource(YEARS_LIST_PATH));
            JSONArray productsArray = loadJsonArray(resourceResolver.getResource(PRODUCTS_LIST_PATH));
            
            // Filter products based on mainGroup
            JSONArray filteredProducts = filterProductsByMainGroup(mainGroupArray, productsArray, dropdownSelector);
            
            // Construct data map for dropdown
            Map<String, String> data = new TreeMap<>();
            for (int i = 0; i < filteredProducts.length(); i++) {
                data.put(filteredProducts.getJSONObject(i).getString("text"), filteredProducts.getJSONObject(i).getString("value"));
            }
            
            // Create DataSource and set it as request attribute
            @SuppressWarnings({"unchecked", "rawtypes"})
            DataSource ds = new SimpleDataSource(new TransformIterator<>(data.keySet().iterator(), (Transformer) o -> {
                String dropValue = (String) o;
                ValueMap vm = new ValueMapDecorator(new HashMap<>());
                vm.put("text", dropValue);
                vm.put("value", data.get(dropValue));
                return new ValueMapResource(resourceResolver, new ResourceMetadata(), JcrConstants.NT_UNSTRUCTURED, vm);
            }));
            request.setAttribute(DataSource.class.getName(), ds);
        } catch (IOException | JSONException e) {
            LOGGER.error("{}: exception occurred: {}", TAG, e.getMessage());
        }
    }

    private JSONArray loadJsonArray(Resource jsonResource) throws IOException, JSONException {
        InputStream content = Objects.requireNonNull(jsonResource.adaptTo(InputStream.class));
        StringBuilder jsonContent = new StringBuilder();
        BufferedReader jsonReader = new BufferedReader(new InputStreamReader(content, StandardCharsets.UTF_8));
        String line;
        while ((line = jsonReader.readLine()) != null) {
            jsonContent.append(line);
        }
        return new JSONArray(jsonContent.toString());
    }

    private JSONArray filterProductsByMainGroup(JSONArray mainGroupArray, JSONArray productsArray, String dropdownSelector) throws JSONException {
        String mainGroupValue = null;
        // Find the mainGroup value based on dropdownSelector
        for (int i = 0; i < mainGroupArray.length(); i++) {
            if (mainGroupArray.getJSONObject(i).getString("text").equals(dropdownSelector)) {
                mainGroupValue = mainGroupArray.getJSONObject(i).getString("value");
                break;
            }
        }

        // Filter products based on mainGroupValue
        JSONArray filteredProducts = new JSONArray();
        for (int i = 0; i < productsArray.length(); i++) {
            String[] productValues = productsArray.getJSONObject(i).getString("value").split(",");
            for (String value : productValues) {
                if (value.trim().equals(mainGroupValue)) {
                    filteredProducts.put(productsArray.getJSONObject(i));
                    break;
                }
            }
        }
        return filteredProducts;
    }
}
